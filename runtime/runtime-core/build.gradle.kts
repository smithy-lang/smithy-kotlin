import aws.sdk.kotlin.gradle.util.prop
import aws.sdk.kotlin.gradle.util.typedProp
import java.nio.file.Files
import java.nio.file.Paths

/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    alias(libs.plugins.kotlinx.serialization)
}

description = "Core runtime for Smithy clients and services generated by smithy-kotlin"
extra["displayName"] = "Smithy :: Kotlin :: Runtime"
extra["moduleName"] = "aws.smithy.kotlin.runtime"

apply(plugin = "org.jetbrains.kotlinx.atomicfu")

kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation(libs.okio)
                // Coroutines' locking features are used in retry token bucket implementations
                api(libs.kotlinx.coroutines.core)
                implementation(libs.kotlinx.datetime)
            }
        }

        nativeMain {
            dependencies {
                api(libs.crt.kotlin)
            }
        }

        commonTest {
            dependencies {
                // Coroutines' locking features are used in retry token bucket implementations
                api(libs.kotlinx.coroutines.test)
                implementation(project(":runtime:testing"))
            }
        }

        jvmTest {
            dependencies {
                implementation(libs.kaml)
            }
        }

        nativeMain {
            dependencies {
                implementation(libs.kotlin.multiplatform.bignum)
            }
        }

        all {
            languageSettings.optIn("aws.smithy.kotlin.runtime.InternalApi")
        }
    }


    mingwX64 {
        val mingwHome = findMingwHome()
        val defPath = layout.buildDirectory.file("cinterop/winver.def")

        // Dynamically construct def file because of dynamic mingw paths
        val defFileTask by tasks.registering {
            outputs.file(defPath)

            val mingwLibs = Paths.get(mingwHome, "lib").toString().replace("\\", "\\\\") // Windows path shenanigans

            doLast {
                Files.writeString(
                    defPath.get().asFile.toPath(),
                    """
                        package = aws.smithy.kotlin.native.winver
                        headers = windows.h
                        compilerOpts = \
                            -DUNICODE \
                            -DWINVER=0x0601 \
                            -D_WIN32_WINNT=0x0601 \
                            -DWINAPI_FAMILY=3 \
                            -DOEMRESOURCE \
                            -Wno-incompatible-pointer-types \
                            -Wno-deprecated-declarations
                        libraryPaths = $mingwLibs
                        staticLibraries = libversion.a
                    """.trimIndent(),
                )
            }
        }

        compilations["main"].cinterops {
            create("winver") {
                val mingwIncludes = Paths.get(mingwHome, "include").toString()
                includeDirs(mingwIncludes)
                definitionFile.set(defPath)

                // Ensure that the def file is written first
                tasks[interopProcessingTaskName].dependsOn(defFileTask)
            }
        }

        // TODO clean up
        val compilerArgs = listOf(
            "-Xverbose-phases=linker", // Enable verbose linking phase from the compiler
            "-linker-option",
            "-v",
        )
        compilerOptions.freeCompilerArgs.addAll(compilerArgs)
    }
}

private fun findMingwHome(): String =
    System.getenv("MINGW_PREFIX")?.takeUnless { it.isBlank() } ?:
    typedProp("mingw.prefix") ?:
    throw IllegalStateException("Cannot determine MinGW prefix location. Please verify MinGW is installed correctly " +
            "and that either the `MINGW_PREFIX` environment variable or the `mingw.prefix` Gradle property is set.")
